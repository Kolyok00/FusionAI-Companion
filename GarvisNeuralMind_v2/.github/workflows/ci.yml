# CI/CD Workflow

name: 🚀 GarvisNeuralMind CI/CD

on:
  push:
    branches: [ main, develop, community/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: 📦 Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}

    - name: 🔧 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt || echo "No dev requirements found"

    - name: 🧹 Lint with flake8
      run: |
        pip install flake8
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: 🧪 Run tests
      run: |
        pip install pytest pytest-cov
        pytest tests/ -v --cov=src/ --cov-report=xml

    - name: 📊 Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  community-features:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: 🔧 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 👥 Test Community API endpoints
      run: |
        python -m pytest tests/community/ -v || echo "Community tests not found yet"

    - name: 🔒 Security scan
      run: |
        pip install bandit safety
        bandit -r src/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true

    - name: 📝 Generate community metrics
      run: |
        python scripts/community_metrics.py || echo "Community metrics script not found yet"

  docker:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Build Docker image
      run: |
        docker build -t garvisneuralmind:${{ github.sha }} .

    - name: 🧪 Test Docker container
      run: |
        docker run --rm -d --name test-container garvisneuralmind:${{ github.sha }}
        sleep 10
        docker logs test-container
        docker stop test-container

  accessibility:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, '[community]') || github.event_name == 'pull_request'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🌐 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: ♿ Accessibility testing
      run: |
        npm install -g @axe-core/cli
        # axe URL when app is running
        echo "Accessibility tests would run here"

  deploy-preview:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [test, community-features, docker]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🚀 Deploy preview
      run: |
        echo "Deploy preview for PR #${{ github.event.number }}"
        # Preview deployment logic would go here

    - name: 💬 Comment PR
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '🚀 Preview deployed! Check out the community features at: https://preview-${{ github.event.number }}.garvisneuralmind.dev'
          })

  release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [test, community-features, docker]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📝 Generate release notes
      run: |
        echo "Generating release notes..."
        # Release notes generation logic

    - name: 🏷️ Create release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          🚀 Community Features Update
          
          ## New Features
          - Community improvements
          - Bug fixes
          - Performance enhancements
          
          ## Community Contributors
          Thanks to all community members who contributed!
        draft: false
        prerelease: false