#!/usr/bin/env python3
"""
GarvisNeuralMind Runner Script
Convenient script to start the application with various options
"""

import argparse
import asyncio
import os
import sys
import subprocess
from pathlib import Path


def check_environment():
    """Check if environment is properly set up"""
    issues = []
    
    # Check if .env file exists
    if not Path(".env").exists():
        issues.append("‚ùå .env file hi√°nyzik - futtasd a setup.py-t")
    
    # Check if logs directory exists
    if not Path("logs").exists():
        Path("logs").mkdir(exist_ok=True)
        print("üìÅ Created logs directory")
    
    # Check basic dependencies
    try:
        import fastapi
        import uvicorn
        import pydantic
        print("‚úÖ Core dependencies el√©rhet≈ëk")
    except ImportError as e:
        issues.append(f"‚ùå Hi√°nyz√≥ dependency: {e.name}")
    
    return issues


def run_development():
    """Run in development mode"""
    print("üöÄ GarvisNeuralMind ind√≠t√°sa fejleszt≈ëi m√≥dban...")
    
    # Change to src directory and run main.py
    os.chdir("src")
    
    try:
        import uvicorn
        uvicorn.run(
            "main:app",
            host="0.0.0.0",
            port=8000,
            reload=True,
            log_level="info"
        )
    except ImportError:
        print("‚ùå uvicorn nincs telep√≠tve")
        return 1
    except Exception as e:
        print(f"‚ùå Hiba az alkalmaz√°s ind√≠t√°sa sor√°n: {e}")
        return 1


def run_production():
    """Run in production mode"""
    print("üöÄ GarvisNeuralMind ind√≠t√°sa production m√≥dban...")
    
    try:
        import uvicorn
        uvicorn.run(
            "src.main:app",
            host="0.0.0.0",
            port=8000,
            workers=4,
            log_level="warning"
        )
    except ImportError:
        print("‚ùå uvicorn nincs telep√≠tve")
        return 1
    except Exception as e:
        print(f"‚ùå Hiba az alkalmaz√°s ind√≠t√°sa sor√°n: {e}")
        return 1


def run_docker():
    """Run using Docker Compose"""
    print("üê≥ GarvisNeuralMind ind√≠t√°sa Docker-rel...")
    
    try:
        # Check if docker-compose is available
        subprocess.run(["docker-compose", "--version"], check=True, capture_output=True)
        
        # Start services
        subprocess.run(["docker-compose", "up", "-d"], check=True)
        print("‚úÖ Docker services elind√≠tva")
        print("üìä Logs megtekint√©se: docker-compose logs -f")
        print("üõë Le√°ll√≠t√°s: docker-compose down")
        
    except subprocess.CalledProcessError:
        print("‚ùå Docker Compose nem el√©rhet≈ë")
        return 1
    except FileNotFoundError:
        print("‚ùå Docker nincs telep√≠tve")
        return 1


def run_tests():
    """Run tests"""
    print("üß™ Tesztek futtat√°sa...")
    
    try:
        subprocess.run([sys.executable, "-m", "pytest", "tests/", "-v"], check=True)
        print("‚úÖ Minden teszt sikeres")
    except subprocess.CalledProcessError:
        print("‚ùå N√©h√°ny teszt sikertelen")
        return 1
    except FileNotFoundError:
        print("‚ùå pytest nincs telep√≠tve")
        return 1


def show_status():
    """Show application status"""
    print("üìä GarvisNeuralMind st√°tusz:")
    
    # Check if running locally
    try:
        import requests
        response = requests.get("http://localhost:8000/", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Alkalmaz√°s fut locally (http://localhost:8000)")
        else:
            print("‚ö†Ô∏è  Alkalmaz√°s el√©rhet≈ë de v√°laszol hib√°val")
    except:
        print("‚ùå Alkalmaz√°s nem fut locally")
    
    # Check Docker services
    try:
        result = subprocess.run(
            ["docker-compose", "ps"], 
            capture_output=True, 
            text=True, 
            check=True
        )
        if "garvis-app" in result.stdout:
            print("‚úÖ Docker services futnak")
        else:
            print("‚ùå Docker services nem futnak")
    except:
        print("‚ùå Docker szolg√°ltat√°sok nem el√©rhet≈ëk")


def main():
    """Main function"""
    parser = argparse.ArgumentParser(description="GarvisNeuralMind Runner")
    parser.add_argument(
        "command",
        choices=["dev", "prod", "docker", "test", "status", "check"],
        help="Command to run"
    )
    
    args = parser.parse_args()
    
    # Always check environment first
    if args.command != "check":
        issues = check_environment()
        if issues:
            print("‚ö†Ô∏è  Environment probl√©m√°k:")
            for issue in issues:
                print(f"  {issue}")
            if args.command != "status":
                print("\nüí° Futtasd: python scripts/setup.py")
                return 1
    
    # Run the requested command
    if args.command == "dev":
        return run_development()
    elif args.command == "prod":
        return run_production()
    elif args.command == "docker":
        return run_docker()
    elif args.command == "test":
        return run_tests()
    elif args.command == "status":
        show_status()
        return 0
    elif args.command == "check":
        issues = check_environment()
        if issues:
            for issue in issues:
                print(issue)
            return 1
        else:
            print("‚úÖ Environment OK")
            return 0
    
    return 0


if __name__ == "__main__":
    exit(main())